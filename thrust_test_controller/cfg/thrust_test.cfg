#!/usr/bin/env python
PACKAGE = "thrust_test_controller"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

control_enum = gen.enum([gen.const("direct_control",      int_t, 0, "Set both rotor speeds individually"),
					gen.const("direct_control_equal",      int_t, 1, "Set both rotor speeds equally"),
                    gen.const("ramp_up",     int_t, 2, "Automatically ramp up"),
                    gen.const("ramp_steps",     int_t, 3, "Ramp in steps")],
                  	"An enum to set control method")
gen.add("control_mode", int_t, 0, "Set control mode", 0, 0, 3, edit_method=control_enum)

group_individual = gen.add_group("Individual control")
group_individual.add("speed_upper", double_t, 0, "Upper rotor speed", 50,  0, 1500)
group_individual.add("speed_lower", double_t, 0, "Lower rotor speed", 50, 0, 1500)
group_individual.add("speed_both", double_t, 0, "Both rotor speeds", 50, 0, 1500)

gen.add("start_ramp",   bool_t,   0, "Start rampup",  False)

group_ramp = gen.add_group("Ramp")
group_ramp.add("ramp_time", double_t, 0, "Both rotor speeds", 5, 1, 300)
group_ramp.add("ramp_vel_start", double_t, 0, "Start velocity for the ramp", 100, 1, 1500)
group_ramp.add("ramp_vel_end", double_t, 0, "End velocity for the ramp", 500, 1, 1500)

group_ramp_steps = gen.add_group("Ramp steps")
group_ramp_steps.add("ramp_time_steps", double_t, 0, "Both rotor speeds", 1, 0.2, 10)
group_ramp_steps.add("high_time", double_t, 0, "Both rotor speeds", 1, 0.2, 10)
group_ramp_steps.add("idle_time", double_t, 0, "Both rotor speeds", 1, 0.2, 10)
group_ramp_steps.add("min_speed", double_t, 0, "Start velocity for the ramp", 100, 1, 1500)
group_ramp_steps.add("max_speed", double_t, 0, "Start velocity for the ramp", 800, 1, 1500)
group_ramp_steps.add("n_steps", int_t, 0, "Start velocity for the ramp", 8, 1, 30)

# gen.add("str_param",    str_t,    0, "A string parameter",  "Hello World")
# gen.add("pi_control",   bool_t,   0, "Use a PI controller for zero net torque",  False)
# gen.add("reset_integrator",   bool_t,   0, "Reset integrator to zero",  True)
# gen.add("pi_kp", double_t, 0, "P gain", 0, 0, 1000)
# gen.add("pi_ki", double_t, 0, "I gain", 0, 0, 1000)

exit(gen.generate(PACKAGE, "thrust_test_controller", "thrust_test"))